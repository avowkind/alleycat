name: Release to PyPI

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  release:
    # Only run if the PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for version bump and tag
      pull-requests: write  # Needed to comment on PR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev
          uv pip install toml-cli

      - name: Determine version bump type
        id: bump-type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" == *"[major]"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ "$PR_TITLE" == *"[minor]"* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Read current version
        id: current-version
        run: |
          VERSION=$(toml get pyproject.toml project.version | tr -d '"')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          BUMP_TYPE="${{ steps.bump-type.outputs.type }}"
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment version based on bump type
          if [ "$BUMP_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in pyproject.toml
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

      # Clean any build artifacts that might be present
      - name: Clean build artifacts
        run: |
          rm -rf dist/
          rm -rf src/*.egg-info/
          rm -f uv.lock
          
      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pyproject.toml
          git commit -m "Bump version to ${{ steps.bump-version.outputs.new_version }}"
          git tag -a "v${{ steps.bump-version.outputs.new_version }}" -m "Release v${{ steps.bump-version.outputs.new_version }}"
          git push && git push --tags

      - name: Build package
        run: uv run python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump-version.outputs.new_version }}
          name: Release v${{ steps.bump-version.outputs.new_version }}
          generate_release_notes: true 